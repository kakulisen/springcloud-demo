<?xml version="1.0" encoding="UTF-8"?>
<!--
-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
-           当scan为true时，此属性生效。默认的时间间隔为1分钟
-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-
- configuration 子节点为 appender、logger、root
-->
<configuration scan="true" scanPeriod="60 second" debug="false">

    <include resource="org/springframework/boot/logging/logback/base.xml"/>


    <!-- 用来定义变量值的标签，定义的值会被插入到logger上下文中，
         定义变量后，可以使用"${name}"来使用变量-->
    <property name="APP_NAME" value="myAppName"/>

    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>


    <!-- key:标识此timestamp的名字；
         datePattern:设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.text.SimpleDateFormat的格式；
         定义后，可以使用"${key}"的形式来使用-->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"></timestamp>

    <!-- 每个logger都关联到logger上下文，默认上下文名称为'default',
         但可以设置成其他名称，用于区分不同应用程序的记录，一旦设置，不能修改-->
    <contextName>${APP_NAME}</contextName>


    <!-- appender是负责写日志的组件，有两个必要的属性：
         name：指定appender的名称
         class：指定appender实现类的全限定名-->

    <!-- 控制台写日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">

        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>
                <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
            </pattern>
        </encoder>

    </appender>

    <!-- 文件写日志 -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">

        <!-- 被写入的文件名，可以是相对路径，也可以是绝对路径，
             如果上级目录不存在会自动创建，没有默认值-->
        <file>${APP_NAME}.log</file>

        <!-- 如果是true，日志被追加到文件结尾，
             如果是false，清空现存文件，默认是true-->
        <append>true</append>

        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>


    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 被写入的文件名，可以是相对路径，也可以是绝对路径，
             如果上级目录不存在会自动创建，没有默认值-->
        <file>${APP_NAME}-rolling.log</file>

        <append>true</append>

        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>


        <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名 -->
        <!-- TimeBasedRollingPolicy : 根据时间来制定滚动策略，即负责滚动也负责触发滚动 -->
        <!-- 每天生产一个日志文件，保存6天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!-- 必要节点，包含文件名及"%d"转换符。
                 "%d"可以包含一个java.text.SimpleDateFormat指定的时间格式。
                 RollingFileAppender的file节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，
                 当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
                 如果没设置file节点，活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次。
                 "/"或者"\"会被当作目录分隔符。-->
            <fileNamePattern>${APP_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>

            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
                 假设设置每个月滚动，且maxHistory是6，则只保存最近6个月的文件(其实就是保存最近6个文件)，删除之前的旧文件。
                 注意，删除旧文件是，那些为了归档而创建的目录也会被删除。-->
            <maxHistory>6</maxHistory>

        </rollingPolicy>


    </appender>


    <!-- 根据固定窗口算法重命名文件的滚动策略，有以下子节点：
         minIndex : 窗口索引最小值
         maxIndex : 窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12
         fileNamePattern : 必须包含"%i"。还可以指定压缩选项.log.gz或.log.zip-->
    <!-- 按照固定窗口模式生成日志文件，当文件大于5MB时，生成新的日志文件。
         窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志 -->
    <appender name="ROLLING_FIXWINDOW" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${APP_NAME}-fixedWindow.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${APP_NAME}-fixedWindow.%i.log.zip</fileNamePattern>

            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>

        </rollingPolicy>

        <!-- 告知RollingFileAppender何时激活滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">

            <maxFileSize>5MB</maxFileSize>

        </triggeringPolicy>

        <!-- +encoder负责两件事，
               ++一是把日志信息转换成字节数组，
               ++二是把字节数组写入到输出流。
             +目前PatternLayoutEncoder是唯一有用的且默认的encoder。
             +有一个pattern子节点，用来设置日志的输入格式。使用"%"加"转换符"方式。
             +如果要输出"%",则必须用"\"对"%"进行转义"\%"-->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>

            <!--outputPatternAsHeader如果是true，将把pattern节点的内容输出到日志文件的顶部
                如果是false不会有任何影响。
                默认是false -->
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>

    </appender>

    <!-- 还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，
         这些就不在这里写了，可以参考官方文档。当然也可以编写自己的Appender -->


    <root level="DEBUG">

        <appender-ref ref="ROLLING" />

    </root>
</configuration>